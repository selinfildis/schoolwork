RANDEDGE \$\P
RANDVERT \#\P
SPACE [ \t]+
NEWLINE [\n]
COMMENT [/]+.*
DIGIT [0-9]
LOWERCASE [a-z]
UPPERCASE [A-Z]
LPARAN \(
RPARAN \)
LBRACKETS \{
RBRACKETS \}
LSQR \[
RSQL \]
SEMICOLON \;
COMMA \,
DOT \.
COLON \:
ASSIGNMENT =
COMPARISON ==
GREATER >
LESS <
GREATEREQUAL >=
LESSEQUAL <=
NOTEQUAL !=
NOT !
MULTIPLICATION \*
DIVISION \:\:
SUBTRACTION \-
ADDITION \+
CONCATENATION \&
ALTERNATION \|
REPETITION \^
HASH \#
DOLAR \$
OROR \|\|
ANDAND \&\&
STRCONCAT \~
IFSTM If
ELSEIF Elseif
ELSE Else
BOOLEAN True|False
FOR For
WHILE While
STRING \"([^\\\"]|\\\"|\\\n|\\\\)*\"
ALPHANUMERIC ({LOWERCASE}|{UPPERCASE}|{DIGIT})
VARIABLE {LOWERCASE}{ALPHANUMERIC}*
PROPERTY Property
FILTER Filter
QUERY Query
DIRECTEDGRAPH DirGraph
UNDIRECTEDGRAPH UndirGraph
VERTEX Vertex
EDGE Edge
PREDICATE Predicate
INTEGER [-+]?{DIGIT}+
FLOAT [-+]?{DIGIT}*(\.{DIGIT}+)
%%
{COMMENT} printf("<COMMENT>");
{SEMICOLON} printf("<SEMICOLON>");
{COMMA} printf("<COMMA>");
{DOT} printf("<DOT>");
{COLON} printf("<COLON>");
{ASSIGNMENT} printf("<ASSIGNMENT>");
{COMPARISON} printf("<COMPARISON>");
{GREATER} printf("<GREATER>");
{LESS} printf("<LESS>");
{GREATEREQUAL} printf("<GREATEREQUAL>");
{LESSEQUAL} printf("<LESSEQUAL>");
{NOTEQUAL} printf("<NOTEQUAL>");
{NOT} printf("<NOT>");
{VARIABLE} printf("<VARIABLE>");
{PROPERTY} printf("<PROPERTY>");
{FILTER} printf("<FILTER>");
{QUERY} printf("<QUERY>");
{DIRECTEDGRAPH} printf("<DIRECTEDGRAPH>");
{UNDIRECTEDGRAPH} printf("<UNDIRECTEDGRAPH>");
{VERTEX} printf("<VERTEX>");
{EDGE} printf("<EDGE>");
{PREDICATE} printf("<PREDICATE>");
{INTEGER} printf("<INTEGER>");
{FLOAT}	printf("<FLOAT>");
{STRING} printf("<STRING>");
{ADDITION} printf("<PLUS>");
{SUBTRACTION} printf("<SUBTRACTION>");
{MULTIPLICATION} printf("<MULTIPLICATION>");
{LBRACKETS} printf("<LBRACKETS>");
{RBRACKETS} printf("<RBRACKETS>");
{LPARAN} printf("<LBRACE>");
{RPARAN} printf("<RBRACE>");
{CONCATENATION} printf("<CONCATENATION>");
{ALTERNATION} printf("<ALTERNATION>");
{DIVISION} printf("<DIVISION>");
{REPETITION} printf("<REPETITION>");
{IFSTM} printf("<IF>");
{ELSEIF} printf("<ELSEIF>");
{ELSE} printf("<ELSE>");
{FOR} printf("<FOR>");
{WHILE} printf("<WHILE>");
{HASH} printf("<HASH>");
{DOLAR} printf("<DOLAR>");
{RANDVERT} printf("<RANDVERTEX>");
{RANDEDGE} printf("<RANDEDGE>");
{STRCONCAT} printf("<STRCONCAT>");
{LSQR} printf("<LSQRBRACE>");
{RSQL} printf("<RSQRBRACE>");
{SPACE} printf("<SPACE>");
{NEWLINE} printf("<NEWLINE>");
%%
int main(void){
	yylex();
	return 0;
}
